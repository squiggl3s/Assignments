import java.util.*;
public class IntTree{
    private TreeNode overallroot;
    //1
    public int countLeft(){
        return countLeft(overallroot);
    }
    private int countLeft(TreeNode root){
        if (root==null){
            return 0;
        } else {
            int yes = 0;
            if (root.getLeft()!=null){
                yes++;
            }
            return yes+countLeft(root.getRight())+countLeft(root.getLeft());
        }
    }
    //2
    public int countEmpty(){
        return countEmpty(overallroot);
    }
    private int countEmpty(TreeNode root){
        if (root==null){
            return 0;
        } else {
            int yes = 0;
            if (root.getLeft()==null){ yes++; } 
            if (root.getRight()==null){ yes++; }
            return yes + countEmpty(root.getLeft()) + countEmpty(root.getRight());
        }
    }
    //3
    public int depthSum(){
        return depthSum(overallroot, 1);
    }
    private int depthSum(TreeNode root, int level){
        if (root==null){
            return 0;
        } else {
            return root.getData()*level
            +depthSum(root.getLeft(), level+1)
            +depthSum(root.getRight(),level+1);
        }
    }
    //4
    public int countEvenBranch(){
        return countEvenBranch(overallroot);
    }
    private int countEvenBranch(TreeNode root){
        if (root==null||root.getLeft()==null&&root.getRight()==null){
            return 0;
        } else {
            int yes = 0;
            if (root.getData()%2==0){
                yes++;
            }
            return yes + countEvenBranch(root.getLeft()) + countEvenBranch(root.getRight());
        }
    }
    //5
    public void printLevel(int n){
        printLevel(overallroot, 1, n);
    }
    private void printLevel(TreeNode root, int level, int n){
        if (level==n&&root!=null){
            System.out.println(root.getData());
        } else if (root!=null){
            printLevel(root.getLeft(), level+1, n);
            printLevel(root.getRight(), level+1, n);
        }
    }
    //6
    public void printLeaves(){
        printLeaves(overallroot);
    }
    private void printLeaves(TreeNode root){
        if (root!=null&&root.getRight()==null&&root.getLeft()==null){
            System.out.print(" "+root.getData());
        } else if (root!=null) {
            printLeaves(root.getLeft());
            printLeaves(root.getRight());
        }
    }
    //7
    public boolean isFull(){
        return isFull(overallroot);
    }
    private boolean isFull(TreeNode root){
        if (root==null||(root.getLeft()==null&&root.getRight()==null)){
            return true;
        } else {
            boolean yes = false;
            if (root.getLeft()!=null&&root.getRight()!=null){
                yes = true;
            }
            return yes&&isFull(root.getRight())&&isFull(root.getLeft());
        }
    }
    //8
    public String toString(){
        return toString(overallroot);
    }
    private String toString(TreeNode root){
        if (root==null){
            return "empty";
        } else if (root.getLeft()==null&&root.getRight()==null){
            return ""+root.getData();
        } else {
            return "("+root.getData()+", "+toString(root.getLeft())+", "+toString(root.getRight())+")";
        }
    }
    //9
    public boolean equals(IntTree t){
        return equals(overallroot, t.overallroot);
    }
    private boolean equals(TreeNode root, TreeNode troot){
        if (root==null||troot==null){
            return root==troot;
        } else {
            boolean yes = false;
            if (root.getData()==troot.getData()){
                yes = true;
            }
            return yes&&equals(root.getRight(), troot.getRight())
            &&equals(root.getLeft(), troot.getLeft());
        }
    }
    //10
    public void doublePositives(){
        doublePositives(overallroot);
    }
    private void doublePositives(TreeNode root){
        if (root!=null){
            if (root.getData()>0){
                root.setData(root.getData()*2);
            }
            doublePositives(root.getRight());
            doublePositives(root.getLeft());
        }
    }
    //11
    public void numberNodes(){
        numberNodes(overallroot, 1);
    }
    private int numberNodes(TreeNode root, int n){
        if (root!=null){
            root.setData(n);
            int left = numberNodes(root.getLeft(), n+1);
            int right = numberNodes(root.getRight(), n+1+left);
            return 1+left+right;
        }
        return 0;
    }
    //12
    public void removeLeaves(){
        overallroot = removeLeaves(overallroot);
    }
    private TreeNode removeLeaves(TreeNode root){
        if (root==null||(root.getLeft()==null&&root.getRight()==null)){
            return null;
        } else {
            root.setLeft(removeLeaves(root.getLeft()));
            root.setRight(removeLeaves(root.getRight()));
            return root;
        }
    }
    //13
    public IntTree copy(){
        IntTree t2 = new IntTree(overallroot);
        copy(overallroot, t2.getOverallroot());
        return t2;
    }
    private TreeNode copy(TreeNode root, TreeNode root2){
        if (root==null){
            return null;
        } else {
            root2.setLeft(copy(root.getLeft(), root2.getLeft()));
            root2.setRight(copy(root.getRight(), root2.getRight()));
            return root;
        }
    }
    //14
    public void completeToLevel(int target){
        if (target<=0){
            throw new IllegalArgumentException("target: "+ target);
        }
        overallroot = completeToLevel(overallroot, 1, target);
    }
    private TreeNode completeToLevel(TreeNode root, int level, int target){
        if (root==null){
            if (level<=target){
                return new TreeNode(-1);
            }
        } else if (!(root.getLeft()==null&&root.getRight()==null)){
            root.setLeft(completeToLevel(root.getLeft(), level+1, target));
            root.setRight(completeToLevel(root.getRight(), level+1, target));
        }
        return root;
    }
    //15
    public void trim(int n1, int n2){
        trim(overallroot, n1, n2);
    }
    private TreeNode trim(TreeNode root, int n1, int n2){
        if (root!=null){
            if (root.getData()<n1||root.getData()>n2){
                return null;
            } else {
                root.setLeft(trim(root.getLeft(), n1, n2));
                root.setRight(trim(root.getRight(), n1, n2));
            }
        }
        return root;
    }
    //16
    public void tighten(){
        tighten(overallroot);
    }
    private TreeNode tighten(TreeNode root){
        if (root!=null){
            if (root.getLeft()==null&&root.getRight()!=null){
                return root.getRight();
            } else if (root.getRight()==null&&root.getLeft()!=null){
                return root.getLeft();
            } else {
                root.setLeft(tighten(root.getLeft()));
                root.setRight(tighten(root.getRight()));
                return root;
            }
        }
        return null;
    }
    //17 
    public IntTree combineWith(IntTree other){
        IntTree t3 = new IntTree(combineWith(overallroot, other.getOverallroot()));
        return t3;
    }
    private TreeNode combineWith(TreeNode root, TreeNode root2){
        TreeNode root3 = null;
        if (root!=null&&root2!=null){
            root3 = new TreeNode(3);
            root3.setLeft(combineWith(root.getLeft(), root2.getLeft()));
            root3.setRight(combineWith(root.getRight(), root2.getRight()));
        } else if (root==null&&root2!=null){
            root3 = new TreeNode(2);
            root3.setLeft(combineWith(null, root2.getLeft()));
            root3.setRight(combineWith(null, root2.getRight()));
        } else if (root!=null&&root2==null){
            root3 = new TreeNode(1);
            root3.setLeft(combineWith(root.getLeft(), null));
            root3.setRight(combineWith(root.getRight(), null));
        }
        return root3;
    }
    //18
    public List inOrderList(){
        List l = new ArrayList<Integer>();
        inOrderList(l, overallroot);
        return l;
    }
    private void inOrderList(List l, TreeNode root){
        if (root!=null){
            inOrderList(l, root.getLeft());
            l.add(root.getData());
            inOrderList(l, root.getRight());
        }
    }
    //19
    public void evenLevels(){
        evenLevels(overallroot, 1);
    }
    private TreeNode evenLevels(TreeNode root, int level){
        if (root==null||(root.getRight()==null&&root.getLeft()==null&&level%2!=0)){
            return null;
        } else {
            root.setLeft(evenLevels(root.getLeft(), level+1));
            root.setRight(evenLevels(root.getRight(), level+1));
            return root;
        }
    }
    //20
    public void makePerfect(){
        overallroot = makePerfect(overallroot, 1, getLevel());
    }
    private TreeNode makePerfect(TreeNode root, int level, int target){
        if (root==null){
            TreeNode temp = new TreeNode(0);
            if (level==target){
                return temp;
            } else if (level<target){
                return makePerfect(temp, level, target);
            }
        } else {
            root.setLeft(makePerfect(root.getLeft(), level+1, target));
            root.setRight(makePerfect(root.getRight(), level+1, target));
        }
        return root;
    }
    //remove like add (x=change(x))
    //simple methods?
    public IntTree(int max){
        if (max<=0){
            throw new IllegalArgumentException("max: "+max);
        }
        overallroot = buildTree(1, max);
    }
    private TreeNode buildTree(int n, int max){
        if (n>max){
            return null;
        } else {
            return new TreeNode(n, buildTree(2*n, max), buildTree(2*n+1,max));
        }
    }
    public IntTree(TreeNode overallroot){
        this.overallroot = overallroot;
    }
    public TreeNode getOverallroot(){
        return overallroot;
    }
    
    
    public int getLevel(){
        return getLevel(overallroot);
    }
    private int getLevel(TreeNode root){
        if (root==null){
            return 0;
        } else {
            return 1+Math.max(getLevel(root.getLeft()), getLevel(root.getRight()));
        }
    }
    
    public void printPreorder(){
        System.out.print("preorder:");
        printPreorder(overallroot);
        System.out.println();
    }
    private void printPreorder(TreeNode root){
        if (root!=null){
            System.out.print(" "+root.getData());
            printPreorder(root.getLeft());
            printPreorder(root.getRight());
        }
    }
    
    public void printInorder(){
        System.out.print("inorder:");
        printInorder(overallroot);
        System.out.println();
    }
    private void printInorder(TreeNode root){
        if (root!=null){
            printInorder(root.getLeft());
            System.out.print(" "+root.getData());
            printInorder(root.getRight());
        }
    }
    
    public void printPostorder(){
        System.out.print("postorder:");
        printPostorder(overallroot);
        System.out.println();
    }
    private void printPostorder(TreeNode root){
        if (root!=null){
            printPostorder(root.getLeft());
            printPostorder(root.getRight());
            System.out.print(" "+root.getData());
        }
    }
    
    public void printSideways(){
        printSideways(overallroot, 0);
    }
    private void printSideways(TreeNode root, int level){
        if (root!=null){
            printSideways(root.getRight(), level+1);
            for (int i=0;i<level;i++){
                System.out.print("\t");
            }
            System.out.println(root.getData());
            printSideways(root.getLeft(), level+1);
        }
    }
}







public class TreeNode{
    int data;
    TreeNode left;
    TreeNode right;
    public TreeNode(int n){
        data = n;
    }
    public TreeNode(int n, TreeNode left, TreeNode right){
        data = n;
        this.left = left;
        this.right = right;
    }
    public TreeNode(){
        this(0, null, null);
    }
    public TreeNode getLeft(){
        return left;
    }
    public TreeNode getRight(){
        return right;
    }
    public int getData(){
        return data; 
    }
    public void setData(int n){
        data = n;
    }
    public void setLeft(TreeNode n){
        left = n;
    }
    public void setRight(TreeNode n){
        right = n;
    }
    public TreeNode copy(){
        return new TreeNode(data);
    }
}


import java.util.*;
public class TreeMain{
    public static void main(){
        
            // Reference Tree #1:
            IntTree t1 = buildt1();
            t1.printSideways();
        
            // Reference Tree #2:
            IntTree t2 = buildt2();
            t2.printSideways();

            // Reference Tree #3:
            IntTree t3 = buildt3();
            t3.printSideways();
            
            System.out.println("============= Chapter 17 Exercises ==============");
            
            // Exercise #1:
            System.out.println("Exercise #1 countLeftNodes(t1): " + t1.countLeft() + "\n");
            
            // Exercise #2:
            System.out.println("Exercise #2 countEmpty(t1): " + t1.countEmpty() + "\n");     
            
            // Exercise #3:
            System.out.println("Exercise #3 depthSum(t1): " + t1.depthSum() + "\n");              
            
            // Exercise #4:
            System.out.println("Exercise #4 countEvenBranch(t2): " + t2.countEvenBranch() + "\n");               
            
            // Exercise #5:
            System.out.println("Exercise #5 pritnLevelt2): ");
            t2.printLevel(3);
            System.out.println("\n");                
            
            // Exercise #6:
            System.out.println("Exercise #6 printLeaves(t2): ");            
            t2.printLeaves();
            System.out.println("\n");
            // Exercise #7:
            System.out.println("Exercise #7 isFull(t1): " + t1.isFull());     
            System.out.println("Exercise #7 isFull(t2): " + t2.isFull());   
            System.out.println("Exercise #7 isFull(t3): " + t3.isFull());    
            System.out.println("\n");    
            
            // Exercise #8:
            System.out.println("Exercise #8 t2.toString(): "+t2.toString());
            System.out.println("\n");    
            
            // Exercise #9:  Build refTree4 to be the same as t1
            IntTree t4 = buildt1();
            System.out.println("Exercise #9 t1.equals(refTree4): " + t1.equals(t4));   
            System.out.println("Exercise #9 t1.equals(t3): " + t1.equals(t3)+ "\n");             
            
            // Exercise #10:
            System.out.println("Exercise #10 t1.doublePositives(): ");
            t1.doublePositives();
            t1.printSideways();
            System.out.println("\n");              
            t2 = buildt2();  // reset it
            
            // Exercise #11:
            System.out.println("Exercise #11 t2.numberNodes(): ");
            t2.numberNodes();
            t2.printSideways();
            System.out.println("\n");              
            t2 = buildt2();  // reset it
            
            // Exercise #12:
            System.out.println("Exercise #12 t1.removeLeaves(): ");
            t1.removeLeaves();
            t1.printSideways();
            System.out.println("\n");              
            t1 = buildt1();  // reset it            
            
            // Exercise #13:
            System.out.println("Exercise #13 t1.copy(): ");
            t4 = t1.copy();
            t4.printSideways();
            System.out.println("\n");              

            // Exercise #14:
            System.out.println("Exercise #14 t2.completeToLevel(): ");
            t2.completeToLevel(4);
            t2.printSideways();
            System.out.println("\n");              
            t2 = buildt2();  // reset it            
            
            // Exercise #15:
            System.out.println("Exercise #15 binaryTree.trim(30,80): ");
            TreeNode binaryTree = new TreeNode(50);
            binaryTree.left = new TreeNode(25);  binaryTree.left.left = new TreeNode(13);
            binaryTree.left.left.left = new TreeNode(10);  binaryTree.left.left.right = new TreeNode(20);
            binaryTree.left.right = new TreeNode(35);  binaryTree.left.right.left = new TreeNode(30); binaryTree.left.right.right = new TreeNode(40);
            binaryTree.right = new TreeNode(75);  binaryTree.right.right = new TreeNode(85);
            binaryTree.right.right.right = new TreeNode(90);  binaryTree.right.left = new TreeNode(65);
            binaryTree.right.left.left = new TreeNode(60);  binaryTree.right.left.right = new TreeNode(70); binaryTree.right.right.left = new TreeNode(80);
            System.out.println("\t binaryTree BEFORE trim(30,80):");
            IntTree t5 = new IntTree(binaryTree);
            t5.printSideways();          
            //binaryTree.trim(30,80);
            System.out.println("\t binaryTree AFTER trim(30,80):");
            //printTreeSideWays(binaryTree);           

            // Exercise #16:
            System.out.println("Exercise #16 t2.tighten(): ");
            t2.tighten();
            t2.printSideways();
            System.out.println("\n");              
            t2 = buildt2();  // reset it          
    
            // Exercise #17:
            System.out.println("Exercise #17 t2.combineWith(t3): ");
            t4 = t2.combineWith(t3);
            t4.printSideways();
            System.out.println("\n");              
            t2 = buildt2();  // reset it                 
            
            // Exercise #18:
            System.out.println("Exercise #18 t3.inOrderList(): ");
            List k = t3.inOrderList();
            System.out.println(k);
            System.out.println("\n");                   
            
           // Exercise #19:   
            System.out.println("Exercise #19 t2.evenLevels(): ");
            t2.evenLevels();
            t2.printSideways();
            System.out.println("\n");              
            t2 = buildt2();  // reset it                    
            
           // Exercise #20:
            System.out.println("Exercise #20 t2.makePerfect(): ");
            t2.makePerfect();
            t2.printSideways();
            System.out.println("\n");              
            t2 = buildt2();  // reset it              
            
    } // main
    
    // Build t1:
    public static IntTree buildt1(){
        TreeNode t1 =   new TreeNode(3);        
        t1.left  = new TreeNode(5);
        t1.left.left  = new TreeNode(1);    
        t1.right  = new TreeNode(2);
        t1.right.left  = new TreeNode(4);  
        t1.right.right  = new TreeNode(6);
        IntTree tree1 = new IntTree(t1);
        return tree1;
    }

    // Build t2:
    public static IntTree buildt2(){
        TreeNode t2 = new TreeNode(2);        
        t2.left  = new TreeNode(8);
        t2.left.left  = new TreeNode(0);    
        t2.right  = new TreeNode(1);
        t2.right.left  = new TreeNode(7);  
        t2.right.left.left  = new TreeNode(4);  
        t2.right.right  = new TreeNode(6);   
        t2.right.right.right  = new TreeNode(9); 
        IntTree tree2 = new IntTree(t2);
        return tree2;
    }    
    
    // Build t3:
    public static IntTree buildt3(){
        TreeNode t3 = new TreeNode(2);        
        t3.left  = new TreeNode(3);
        t3.left.left  = new TreeNode(8);    
        t3.left.right  = new TreeNode(7);              
        t3.right  = new TreeNode(1);
        IntTree tree3 = new IntTree(t3);
        return tree3;
    }    

     // postCondition: prints in reversed preorder the tree with given
     //       root, indenting each line to the given level
    private static void printTreeSideWays(TreeNode root, int level) {
        if (root != null) {
            printTreeSideWays(root.right, level + 1);
            for (int i = 0; i < level; i++){
                System.out.print("\t");
            }
            System.out.println(root.data);
            printTreeSideWays(root.left, level + 1);
        }
    }     
}  // Chapter17_Exercises_MAIN



